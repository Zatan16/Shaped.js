const PI=Math.PI;const shape={rect(length,width){return{perimeter:2*(length+width),area:length*width}},square(side){return shape.rect(side,side)},circle(radius){return{diameter:2*radius,circumferance:2*PI*radius,area:PI*(Math.pow(radius,2))}},triangle(sides,base,height){if(!(sides[0]+sides[1]>sides[2])||!(sides[1]+sides[2]>sides[0])||!(sides[2]+sides[0]>sides[1]))throw new SyntaxError("Sum of any two sides of a triangle should be greater than the other side");let ans={perimeter:sides[0]+sides[1]+sides[2]};if(!base&&!height){ans.area=Math.sqrt((ans.perimeter/2)*((ans.perimeter/2)-sides[0])*((ans.perimeter/2)-sides[1])*((ans.perimeter/2)-sides[2]))}else if(base&&!height){ans.area=Math.sqrt((ans.perimeter/2)*((ans.perimeter/2)-sides[0])*((ans.perimeter/2)-sides[1])*((ans.perimeter/2)-sides[2]));ans.height=(2*ans.area)/base}else if(base&&height){ans.area=(base*height)/2}return ans},polygon(sides){let add=0;sides.forEach(e=>{add+=e});return{perimeter:add}},trapezoid(sides,height){let ans={perimeter:sides[0]+sides[1]+sides[2]+sides[3]};if(height){ans.area=(sides[0]+sides[1])*height/2}return ans},"pythagoras-theorum"(perpendicular,base){return{hypotenuse:Math.sqrt(Math.pow(perpendicular,2)+Math.pow(base,2))}},sort(mode,numbers){if(mode=="asc"){numbers.sort((a,b)=>{return a-b});if(mode=="des"){shape.sort("asc",numbers).reverse();throw new SyntaxError("Mode should be specified as asc or des for Ascending or Descending orders respectively")}}},draw:{point(ctx,x,y,stroke,thickness){ctx.beginPath();this.rect(ctx,x,y,1,1,stroke,null,thickness);ctx.closePath()},line(ctx,x1,y1,x2,y2,stroke,thickness){ctx.beginPath();ctx.lineWidth=thickness;ctx.strokeStyle=stroke;ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();ctx.closePath()},rect(ctx,x,y,width,height,stroke,fill,thickness){ctx.beginPath();ctx.fillStyle=fill;ctx.strokeStyle=stroke;ctx.lineWidth=thickness;ctx.rect(x,y,width,height);if(fill)ctx.fill();if(stroke) ctx.stroke();ctx.closePath()},square(ctx,x,y,side,stroke,fill,thickness){this.rect(ctx,x,y,side,side,stroke,fill,thickness)},arc(ctx,x,y,radius,startAngle,endAngle,counterClockwise,stroke,fill,thickness){ctx.beginPath();ctx.fillStyle=fill;ctx.strokeStyle=stroke;ctx.lineWidth=thickness;ctx.arc(x,y,radius,startAngle,endAngle,counterClockwise);if(fill)ctx.fill();if(stroke)ctx.stroke();ctx.closePath()},circle(ctx,x,y,radius,stroke,fill,thickness){this.arc(ctx,x,y,radius,0,2*Math.PI,false,stroke,fill,thickness)},triangle(ctx,x1,y1,x2,y2,x3,y3,stroke,fill,thickness){ctx.beginPath();ctx.fillStyle=fill;ctx.strokeStyle=stroke;ctx.lineWidth=thickness;ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.lineTo(x3,y3);if(fill)ctx.fill();if(stroke)ctx.stroke();ctx.closePath();},polygon(ctx,sides,stroke,fill,thickness){ctx.beginPath();ctx.strokeStyle=stroke;ctx.lineWidth=thickness;ctx.fillStyle=fill;ctx.moveTo(sides[0].x,sides[0].y);sides.forEach((v,i)=>{if(sides[i+1]){ctx.lineTo(sides[i+1].x,sides[i+1].y)}else{ctx.lineTo(sides[0].x,sides[0].y)}});if(stroke)ctx.stroke();if(fill)ctx.fill();ctx.closePath()}}}
